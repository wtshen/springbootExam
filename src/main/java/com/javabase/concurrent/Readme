synchronized
0.锁的概念:一段synchronized的代码被一个线程执行之前，他要先拿到执行这段代码的权限，
        在Java里边就是拿到某个同步对象的锁（一个对象只有一把锁）；
        如果这个时候同步对象的锁被其他线程拿走了，他（这个线程）就只能等了（线程阻塞在锁池等待队列中）。
        取到锁后，他就开始执行同步代码(被synchronized修饰的代码）；
        线程执行完同步代码后马上就把锁还给同步对象，其他在锁池中等待的某个线程就可以拿到锁执行同步代码了。
        这样就保证了同步代码在统一时刻只有一个线程在执行。
        http://blog.csdn.net/u012291108/article/details/51348603
1.synchronized代码块是原子操作,不可分的,当前线程在执行的时候是不会被打断的.
2.同步和非同步方法是否可以同时调用? 可以的,因为非同步方法不需要检查该对象的锁
3.锁粒度越细越好
4.锁是锁在堆内存的对象上,而不是栈内存对象变量的引用
5.不要以字符串常量作为锁定对象
6.线程间通讯:
    wait notify --必须先加锁,再使用
    Countdownlatch/cyclicbarrier/semaphore
7.ReentrantLock和synchronized的区别
    1.ReentrantLock灵活,可进行tryLock,根据返回的锁定状态,实现自己的业务逻辑
    2.synchronized是竞争锁（效率高）,ReentrantLock可以指定公平锁
8.高并发主要3块知识点
    一.synchronizer 线程间同步,通讯  (1-22)
        synchronized wait notifyall
        Lock ReentrantLock Condition await signalAll
    二.并发容器
        1.map/set使用（map是<key,value>,set是<key>）
        不使用多线程的时候:
            HashMap
            TreeMap
            LinkedHashMap
            并发量小的时候可以使用:
                Collections.synchronizedXXX
                Hashtable 所有实现都带锁,锁定整个对象
        高并发的场景下:
            ConcurrentHashMap
                JDK1.7将map分成16段,每次只锁定其中一段,效率比HashTable高
                JDK1.8采用Node+CAS+Synchronized保证并发安全实现
            ConcurrentSkipListMap 需要排序
        2.队列
        不需要同步的队列:
            ArrayList
            LinkedList
            如果需要同步,并发量小时:
                Collections.synchronizedXXX
            CopyOnWriteList 写时复制,适用写少读特别多时
        高并发的场景下:
            ConcurrentLinkedQueue
            BlockingQueue
                LinedBQ 无界队列
                ArrayBQ 有界队列
                如下两种Queue都是直接交给消费者
                    TransferQueue 无消费者时阻塞
                    SynchronusQueue 容量为0,加的内容必须被消费掉
                DelayQueue
                    无界队列
                    等待时间最长的先往外拿
                    场景:
                        a) 关闭空闲连接。服务器中，有很多客户端的连接，空闲一段时间之后需要关闭之。
                        b) 缓存。缓存中的对象，超过了空闲时间，需要从缓存中移出。
                        c) 任务超时处理。在网络协议滑动窗口请求应答式交互时，处理超时未响应的请求。
    三.threadpool\executor\callable\feature